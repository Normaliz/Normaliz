name: Run Sage CI for Cygwin

on:
  pull_request:
    types: [opened, synchronize]
  push:
    tags:
      - '*'

env:
  MAKE: make -j8
  SAGE_NUM_THREADS: 3
  SAGE_CHECK: warn
  SAGE_CHECK_PACKAGES: "!cython,!r,!python3,!python2,!nose,!pathpy,!gap,!cysignals,!linbox,!git,!ppl"
  CYGWIN: winsymlinks:native
  CONFIGURE_ARGS: --enable-experimental-packages --enable-download-from-upstream-url
  SAGE_FAT_BINARY: yes

jobs:

############################################## stage-i ##########################################

  cygwin:
    env:
      STAGE: i-a
      # builds openblas
      TARGETS: pynormaliz
      LOCAL_ARTIFACT_NAME: sage-local-commit-${{ github.sha }}-cygwin-${{ matrix.pkgs }}
      LOGS_ARTIFACT_NAME: logs-commit-${{ github.sha }}-cygwin-${{ matrix.pkgs }}

    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        pkgs: [standard]
    steps:
    - run: |
        git config --global core.autocrlf false
        git config --global core.symlinks true
    - name: Check out SageMath
      uses: actions/checkout@v2
      with:
        repository: sagemath/sage
        ref: develop
    - name: Check out Normaliz
      uses: actions/checkout@v2
      with:
        path: build/pkgs/normaliz/src
    - name: install cygwin and minimal prerequisites with choco
      shell: bash {0}
      run: |
        choco --version
        PACKAGES=$(sed 's/#.*//;' ./build/pkgs/cygwin.txt ./build/pkgs/cygwin-bootstrap.txt)
        choco install $PACKAGES --source cygwin
    - name: install additional cygwin packages with choco
      if: contains(matrix.pkgs, 'standard')
      shell: bash {0}
      run: |
        PACKAGES=$(sed 's/#.*//;' ./build/pkgs/*/distros/cygwin.txt)
        choco install $PACKAGES --source cygwin
    - name: Run Normaliz make dist
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && (cd build/pkgs/normaliz/src && ./bootstrap.sh && ./configure && make dist) && mkdir -p upstream && cp build/pkgs/normaliz/src/*.tar.gz upstream/normaliz-git.tar.gz && (PATH=$(pwd)/build/bin:$PATH; sage-package create normaliz --version git --tarball normaliz-git.tar.gz --type=optional && cat build/pkgs/normaliz/checksums.ini) && (cd build/pkgs/pynormaliz && rm -rf src PyNormaliz && tar -xzf - --wildcards normaliz-\*/PyNormaliz && mv normaliz-*/PyNormaliz src && cd src && python3 setup.py sdist) <upstream/normaliz-git.tar.gz && cp build/pkgs/pynormaliz/src/dist/*.tar.gz upstream/pynormaliz-git.tar.gz && (PATH=$(pwd)/build/bin:$PATH; sage-package create pynormaliz --version git --tarball pynormaliz-git.tar.gz --type=optional && cat build/pkgs/pynormaliz/checksums.ini) && ls -l upstream/ && sed -i.bak '/upstream/d' .dockerignore && sed -i.bak '/:toolchain:/i ADD upstream upstream' build/bin/write-dockerfile.sh '
    - name: bootstrap
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && env && ./bootstrap'
    - name: configure
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && ./configure $CONFIGURE_ARGS'
    - name: make
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -x -c 'export PATH=/usr/local/bin:/usr/bin && cd $(cygpath -u "$GITHUB_WORKSPACE") && make -k -w V=0 base-toolchain && make -k -w V=0 $TARGETS'
    - name: Prepare logs artifact
      shell: bash
      run: |
        mkdir -p "artifacts/$LOGS_ARTIFACT_NAME"; for a in local/var/tmp/sage/build/*; do if [ -d $a ]; then tar -c --remove-files -f "artifacts/$LOGS_ARTIFACT_NAME/$(basename $a).tar" $a; fi; done; cp -r logs/*  "artifacts/$LOGS_ARTIFACT_NAME"
      if: always()
    - uses: actions/upload-artifact@v2
      with:
        path: artifacts
        name: ${{ env.LOGS_ARTIFACT_NAME }}
      if: always()
    - name: Print out logs for immediate inspection
      # The markup in the output is a GitHub Actions logging command
      # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/development-tools-for-github-actions
      shell: bash
      run: |
        find "artifacts/$LOGS_ARTIFACT_NAME" -type f -name "*.log" -exec sh -c 'if tail -20 "{}" 2>/dev/null | grep "^Error" >/dev/null; then echo :":"error file={}:":" ==== LOG FILE {} CONTAINS AN ERROR ====; cat {} ; fi' \;
      if: always()
    - name: Prepare sage-local artifact
      # We specifically use the cygwin tar so that symlinks are saved/restored correctly on Windows.
      # We remove the local/lib64 link, which will be recreated by the next stage.
      run: |
        C:\\tools\\cygwin\\bin\\bash -l -c 'cd $(cygpath -u "$GITHUB_WORKSPACE") && rm -f local/lib64; tar -cf /tmp/sage-local-${{ env.STAGE }}.tar --remove-files local'
      if: always()
    - uses: actions/upload-artifact@v2
      # upload-artifact@v2 does not support whitespace in file names.
      # so we tar up the directory ourselves
      with:
        path: C:\\tools\\cygwin\\tmp\\sage-local-${{ env.STAGE }}.tar
        name: ${{ env.LOCAL_ARTIFACT_NAME }}
      if: always()
